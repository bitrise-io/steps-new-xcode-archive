title: Xcode Archive & Export for iOS
summary: Run the Xcode archive command and then export an .ipa from the archive.
description: |-

  The Step archives your Xcode project by running the `xcodebuild archive` command and then exports the archive into an .ipa file with the `xcodebuild -exportArchive` command. This .ipa file can be shared, installed on test devices, or uploaded to the App Store Connect.

  ### Configuring the Step

  Before you can use the Step, you need code signing files. Certificates must be uploaded to Bitrise while provisioning profiles should be either uploaded or, if using the iOS Auto Provisioning Step, downloaded from the Apple Developer Portal or generated automatically.

  To configure the Step:

  1. Make sure the **Project path** input points to the correct location.

     By default, you do not have to change this.
  2. Set the correct value to the **Distribution method** input. If you use the **iOS Auto Provision** Step, the value of this input should be the same as the **Distribution type** input of that Step.
  3. Make sure the target scheme is a valid, existing Xcode scheme.
  4. Optionally, you can define a configuration type to be used (such as Debug or Release) in the **Build configuration** input.

     By default, the selected Xcode scheme determines which configuration will be used. This option overwrites the configuration set in the scheme.
  5. If you wish to use a different Developer portal team than the one set in your Xcode project, enter the ID in the **Developer Portal team** input.

  ### Troubleshooting

  If the Step fails, check your code signing files first. Make sure they are the right type for your export method. For example, an `app-store` distribution method requires an App Store type provisioning profile and a Distribution certificate.

  Check **Debugging** for additional options to run the Step. The **Additional options for xcodebuild command** input allows you add any flags that the `xcodebuild` command supports.

  Make sure the **Scheme** and **Build configuration** inputs contain values that actually exist in your Xcode project.

  ### Useful links

  - https://devcenter.bitrise.io/code-signing/ios-code-signing/create-signed-ipa-for-xcode/
  - https://devcenter.bitrise.io/code-signing/ios-code-signing/resigning-an-ipa/
  - https://devcenter.bitrise.io/deploy/ios-deploy/ios-deploy-index/

  ### Related Steps

  - [Certificate and profile installer](https://www.bitrise.io/integrations/steps/certificate-and-profile-installer)
  - [iOS Auto Provision](https://www.bitrise.io/integrations/steps/ios-auto-provision)
  - [Deploy to iTunesConnect](https://www.bitrise.io/integrations/steps/deploy-to-itunesconnect-deliver)

website: https://github.com/bitrise-steplib/steps-xcode-archive
source_code_url: https://github.com/bitrise-steplib/steps-xcode-archive
support_url: https://github.com/bitrise-steplib/steps-xcode-archive/issues
project_type_tags:
- ios
- react-native
- flutter
type_tags:
- build
is_requires_admin_user: false
is_always_run: false
is_skippable: false
deps:
  check_only:
  - name: xcode
toolkit:
  go:
    package_name: github.com/bitrise-steplib/steps-xcode-archive
inputs:
- project_path: $BITRISE_PROJECT_PATH
  opts:
    title: Project path
    summary: Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.
    description: |-
      Xcode Project (`.xcodeproj`) or Workspace (`.xcworkspace`) path.

      The input value sets xcodebuild's `-project` or `-workspace` option.
    is_required: true

- scheme: $BITRISE_SCHEME
  opts:
    title: Scheme
    summary: Xcode Scheme name.
    description: |-
      Xcode Scheme name.

      The input value sets xcodebuild's `-scheme` option.
    is_required: true

- distribution_method: development
  opts:
    title: Distribution method
    summary: Describes how Xcode should export the archive.
    value_options:
    - development
    - app-store
    - ad-hoc
    - enterprise
    is_required: true

# xcodebuild configuration

- configuration:
  opts:
    category: xcodebuild configuration
    title: Build Configuration
    summary: Xcode Build Configuration.
    description: |-
      Xcode Build Configuration.

      If not specified, the default Build Configuration will be used.

      The input value sets xcodebuild's `-configuration` option.

- xcconfig_content: COMPILER_INDEX_STORE_ENABLE = NO
  opts:
    category: xcodebuild configuration
    title: Build settings (xcconfig)
    summary: Build settings to override the project's build settings.
    description: |-
      Build settings to override the project's build settings.

      Build settings must be separated by newline character (`\n`).

      Example:

      ```
      COMPILER_INDEX_STORE_ENABLE = NO
      ONLY_ACTIVE_ARCH[config=Debug][sdk=*][arch=*] = YES
      ```

      The input value sets xcodebuild's `-xcconfig` option.

- perform_clean_action: "no"
  opts:
    category: xcodebuild configuration
    title: Perform clean action
    summary: If this input is set, `clean` xcodebuild action will be performed besides the `archive` action.
    value_options:
    - "yes"
    - "no"
    is_required: true

- xcodebuild_options:
  opts:
    category: xcodebuild configuration
    title: Additional options for the xcodebuild command
    summary: Additional options to be added to the executed xcodebuild command.

# xcodebuild log formatting

- log_formatter: xcpretty
  opts:
    category: xcodebuild log formatting
    title: Log formatter
    summary: Defines how `xcodebuild` command's log is formatted.
    description: |-
      Defines how `xcodebuild` command's log is formatted.

      Available options:

      - `xcpretty`: The xcodebuild command's output will be prettified by xcpretty.
      - `xcodebuild`: Only the last 20 lines of raw xcodebuild output will be visible in the build log.

      The raw xcodebuild log will be exported in both cases.
    value_options:
    - xcpretty
    - xcodebuild
    is_required: true

# Automatic code signing

- automatic_code_signing: "off"
  opts:
    category: Automatic code signing
    title: Automatic code signing method
    summary: This input determines which Bitrise Apple service connection should be used for automatic code signing.
    description: |-
      This input determines which Bitrise Apple service connection should be used for automatic code signing.

      Available values:
      - `off`: Do not do any auto code signing.
      - `api-key`: [Bitrise Apple Service connection with API Key](https://devcenter.bitrise.io/getting-started/connecting-to-services/setting-up-connection-to-an-apple-service-with-api-key/).
      - `apple-id`: [Bitrise Apple Service connection with Apple ID](https://devcenter.bitrise.io/getting-started/connecting-to-services/connecting-to-an-apple-service-with-apple-id/).
    value_options:
    - "off"
    - api-key
    - apple-id
    is_required: true

- register_test_devices: "no"
  opts:
    category: Automatic code signing
    title: Register test devices on the Apple Developer Portal
    summary: If this input is set, the Step will register the known test devices on Bitrise from team members with the Apple Developer Portal.
    description: |-
      If this input is set, the Step will register the known test devices on Bitrise from team members with the Apple Developer Portal.

      Note that setting this to yes may cause devices to be registered against your limited quantity of test devices in the Apple Developer Portal, which can only be removed once annually during your renewal window.
    is_required: true
    value_options:
    - "yes"
    - "no"

- certificate_url_list: $BITRISE_CERTIFICATE_URL
  opts:
    category: Automatic code signing
    title: Code signing certificate URL
    summary: URL of the code signing certificate to download.
    description: |-
      URL of the code signing certificate to download.

      Multiple URLs can be specified, separated by a pipe (`|`) character.

      Local file path can be specified, using the `file://` URL scheme.
    is_required: true
    is_sensitive: true

- passphrase_list: $BITRISE_CERTIFICATE_PASSPHRASE
  opts:
    category: Automatic code signing
    title: Code signing certificate passphrase
    summary: Passphrases for the provided code signing certificates.
    description: |-
      Passphrases for the provided code signing certificates.

      Specify as many passphrases as many Code signing certificate URL provided, separated by a pipe (`|`) character.
    is_required: true
    is_sensitive: true

- keychain_path: $HOME/Library/Keychains/login.keychain
  opts:
    category: Automatic code signing
    title: Keychain path
    summary: Path to the Keychain where the code signing certificates will be installed.
    is_required: true
    is_dont_change_value: true

- keychain_password: $BITRISE_KEYCHAIN_PASSWORD
  opts:
    category: Automatic code signing
    title: Keychain password
    summary: Password for the provided Keychain.
    is_required: true
    is_sensitive: true
    is_dont_change_value: true

# IPA export configuration

- export_development_team:
  opts:
    category: IPA export configuration
    title: Developer Portal team
    summary: The Developer Portal team to use for this export.
    description: |-
      The Developer Portal team to use for this export

      Defaults to the team used to build the archive.

- compile_bitcode: "yes"
  opts:
    category: IPA export configuration
    title: Rebuild from bitcode
    summary: For __non-App Store__ exports, should Xcode re-compile the app from bitcode?
    value_options:
    - "yes"
    - "no"
    is_required: true

- upload_bitcode: "yes"
  opts:
    category: IPA export configuration
    title: Include bitcode
    summary: For __App Store__ exports, should the package include bitcode?
    value_options:
    - "yes"
    - "no"
    is_required: true

- icloud_container_environment:
  opts:
    category: IPA export configuration
    title: iCloud container environment
    summary: If the app is using CloudKit, this configures the `com.apple.developer.icloud-container-environment` entitlement.
    description: |-
      If the app is using CloudKit, this configures the `com.apple.developer.icloud-container-environment` entitlement.

      Available options vary depending on the type of provisioning profile used, but may include: `Development` and `Production`.

- export_options_plist_content:
  opts:
    category: IPA export configuration
    title: Export options plist content
    summary: Specifies a plist file content that configures archive exporting.
    description: |-
      Specifies a plist file content that configures archive exporting.

      If not specified, the Step will auto-generate it.

# Step Output Export configuration

- output_dir: $BITRISE_DEPLOY_DIR
  opts:
    category: Step Output Export configuration
    title: Output directory path
    summary: This directory will contain the generated artifacts.
    is_required: true

- export_all_dsyms: "yes"
  opts:
    category: Step Output Export configuration
    title: Export all dSYMs
    summary: Export additional dSYM files besides the app dSYM file for Frameworks.
    value_options:
    - "yes"
    - "no"
    is_required: true

- artifact_name:
  opts:
    category: Step Output Export configuration
    title: Override generated artifact names
    summary: This name will be used as basename for the generated Xcode Archive, App, IPA and dSYM files.
    description: |-
      This name will be used as basename for the generated Xcode Archive, App, IPA and dSYM files.

      If not specified, the Product Name (`PRODUCT_NAME`) Build settings value will be used.
      If Product Name is not specified, the Scheme will be used.

# Caching

- cache_level: swift_packages
  opts:
    category: Caching
    title: Enable collecting cache content
    summary: Defines what cache content should be automatically collected.
    description: |-
      Defines what cache content should be automatically collected.

      Available options:

      - `none`: Disable collecting cache content
      - `swift_packages`: Collect Swift PM packages added to the Xcode project
    value_options:
    - none
    - swift_packages
    is_required: true

# Debugging

- verbose_log: "no"
  opts:
    category: Debugging
    title: Enable verbose logging
    summary: If this input is set, the Step will print additional logs for debugging.
    value_options:
    - "yes"
    - "no"
    is_required: true

outputs:
- BITRISE_IPA_PATH:
  opts:
    title: .ipa file path
    summary: Local path of the created .ipa file
- BITRISE_APP_DIR_PATH:
  opts:
    title: .app directory path
    summary: Local path of the generated `.app` directory
- BITRISE_DSYM_DIR_PATH:
  opts:
    title: The created .dSYM dir's path
    description: |-
      This Environment Variable points to the path of the directory which contains the dSYMs files.
      If `export_all_dsyms` is set to `yes`, the Step will collect every dSYM (app dSYMs and framwork dSYMs).
- BITRISE_DSYM_PATH:
  opts:
    title: The created .dSYM.zip file's path
    description: |-
      This Environment Variable points to the path of the zip file which contains the dSYM files.
      If `export_all_dsyms` is set to `yes`, the Step will also collect framework dSYMs in addition to app dSYMs.
- BITRISE_XCARCHIVE_PATH:
  opts:
    title: .xcarchive file path
    summary: The created .xcarchive file's path
- BITRISE_XCARCHIVE_ZIP_PATH:
  opts:
    title: .xcarchive.zip path
    summary: The created .xcarchive.zip file's path.

- BITRISE_XCODEBUILD_ARCHIVE_LOG_PATH:
  opts:
    title: "`xcodebuild archive` command log file path"
    description: |-
      The file path of the raw `xcodebuild archive` command log. The log is placed into the `Output directory path`.
- BITRISE_XCODEBUILD_EXPORT_ARCHIVE_LOG_PATH:
  opts:
    title: "`xcodebuild -exportArchive` command log file path"
    description: |-
      The file path of the raw `xcodebuild -exportArchive` command log. The log is placed into the `Output directory path`.
- BITRISE_IDEDISTRIBUTION_LOGS_PATH:
  opts:
    title: Path to the xcdistributionlogs
    description: |-
      Exported when `xcodebuild -exportArchive` command fails.
